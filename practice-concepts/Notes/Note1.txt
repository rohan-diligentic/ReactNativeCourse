 What is FlatList in React Native and how does it differ from ScrollView?
Answer: FlatList is a component used to render large lists efficiently by only rendering the items that are visible on the screen. It is optimized for performance, especially for large datasets. ScrollView, on the other hand, renders all its children at once, which can lead to performance issues when the list size grows.
2. How do you optimize the performance of a FlatList?
Answer: Some ways to optimize FlatList performance include:
Use the keyExtractor to ensure each item has a unique identifier.
Use getItemLayout for fixed-size list items to improve scroll performance.
Use initialNumToRender to render a limited number of items initially.
Enable windowSize to control how many items are rendered off-screen.
Avoid re-rendering unnecessary items by using React.memo or shouldComponentUpdate.
3. What is keyExtractor in FlatList and why is it important?
Answer: keyExtractor is a prop in FlatList that returns a unique key for each item in the list. It helps React optimize rendering by identifying items uniquely, preventing unnecessary re-renders when data changes. Typically, you can use an item's unique identifier (e.g., id) as the key.
4. What are getItemLayout and its benefits?
Answer: getItemLayout is a function prop that allows you to specify the height and position of each item in the list. By using this, you can improve performance in lists with fixed-size items because React Native can skip calculating item layout and instead use the provided information to scroll more efficiently.
5. What is the purpose of initialNumToRender in FlatList?
Answer: The initialNumToRender prop determines how many items to render initially when the list first appears. This helps in reducing initial render time and improves the user experience by showing the first few items quickly.
6. How would you implement infinite scrolling in FlatList?
Answer: Infinite scrolling can be implemented using the onEndReached and onEndReachedThreshold props. onEndReached is triggered when the user scrolls to the end of the list, and onEndReachedThreshold specifies how far from the end the user needs to be before the onEndReached callback is triggered (e.g., 0.5 would trigger when the user is halfway through the last item).
javascript
Copy code
<FlatList
  data={data}
  renderItem={renderItem}
  onEndReached={loadMoreData} // Function to fetch more data
  onEndReachedThreshold={0.5} // Trigger when user is halfway through the last item
/>
7. What is the purpose of ListHeaderComponent and ListFooterComponent in FlatList?
Answer: These props allow you to add components at the top or bottom of the list. For example, you can use ListHeaderComponent for a title or a loading spinner at the top, and ListFooterComponent for showing a "loading more" indicator at the bottom.
8. How do you handle empty states in a FlatList?
Answer: To handle empty states, you can conditionally render a component when the data array is empty. For example, you could render a custom message or image indicating no data is available:
javascript
Copy code
<FlatList
  data={data}
  ListEmptyComponent={<Text>No items found</Text>} // Show when data is empty
  renderItem={renderItem}
/>
9. Explain the windowSize prop in FlatList.
Answer: The windowSize prop defines the number of items that should be kept in memory at any given time, including both on-screen and off-screen items. Increasing this number can improve scroll performance but will use more memory, while decreasing it reduces memory usage but may cause more frequent renders as items are loaded.
10. How would you implement a pull-to-refresh feature in FlatList?
Answer: FlatList provides a refreshing prop and an onRefresh callback for implementing pull-to-refresh. You can use these props to trigger a refresh action, such as re-fetching the list data.
Example:

javascript
Copy code
const [refreshing, setRefreshing] = useState(false);

const onRefresh = () => {
  setRefreshing(true);
  // Fetch new data here
  setRefreshing(false); // Once the new data is loaded
};

return (
  <FlatList
    data={data}
    renderItem={renderItem}
    refreshing={refreshing}
    onRefresh={onRefresh}
  />
);